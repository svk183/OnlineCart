"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular-devkit/architect/testing");
const core_1 = require("@angular-devkit/core");
const events_1 = require("events");
const child_process = require("child_process");
const path = require("path");
const fsUtility = require("@nrwl/workspace");
const fsExtras = require("fs-extra");
const architect_1 = require("@angular-devkit/architect");
const devkitArchitect = require("@angular-devkit/architect");
const rxjs_1 = require("rxjs");
const Cypress = require('cypress');
describe('Cypress builder', () => {
    let architect;
    let cypressRun;
    let cypressOpen;
    let fakeEventEmitter;
    let fork;
    let cypressConfig;
    const cypressBuilderOptions = {
        cypressConfig: 'apps/my-app-e2e/cypress.json',
        parallel: false,
        tsConfig: 'apps/my-app-e2e/tsconfig.json',
        devServerTarget: 'my-app:serve',
        headless: true,
        exit: true,
        record: false,
        baseUrl: undefined,
        watch: false
    };
    beforeEach(() => __awaiter(this, void 0, void 0, function* () {
        const registry = new core_1.schema.CoreSchemaRegistry();
        registry.addPostTransform(core_1.schema.transforms.addUndefinedDefaults);
        const testArchitectHost = new testing_1.TestingArchitectHost('/root', '/root');
        architect = new architect_1.Architect(testArchitectHost, registry);
        yield testArchitectHost.addBuilderFromPackage(path.join(__dirname, '../../..'));
        devkitArchitect.scheduleTargetAndForget = jest
            .fn()
            .mockReturnValue(rxjs_1.of({
            success: true,
            baseUrl: 'http://localhost:4200'
        }));
        fakeEventEmitter = new events_1.EventEmitter();
        fork = spyOn(child_process, 'fork').and.returnValue(fakeEventEmitter);
        cypressRun = spyOn(Cypress, 'run').and.returnValue(Promise.resolve({}));
        cypressOpen = spyOn(Cypress, 'open').and.returnValue(Promise.resolve({}));
        cypressConfig = {
            fixturesFolder: './src/fixtures',
            integrationFolder: './src/integration'
        };
        spyOn(fsUtility, 'readJsonFile').and.callFake(path => {
            return path.endsWith('tsconfig.json')
                ? {
                    compilerOptions: {
                        outDir: '../../dist/out-tsc/apps/my-app-e2e/src'
                    }
                }
                : cypressConfig;
        });
        spyOn(fsExtras, 'copySync');
        spyOn(process, 'exit');
    }));
    it('should call `Cypress.run` if headless mode is `true`', (done) => __awaiter(this, void 0, void 0, function* () {
        const run = yield architect.scheduleBuilder('@nrwl/cypress:cypress', cypressBuilderOptions);
        run.result.then(() => __awaiter(this, void 0, void 0, function* () {
            yield run.stop();
            expect(cypressRun).toHaveBeenCalledWith(jasmine.objectContaining({
                config: { baseUrl: 'http://localhost:4200' },
                project: path.dirname(cypressBuilderOptions.cypressConfig)
            }));
            expect(cypressOpen).not.toHaveBeenCalled();
            done();
        }));
        fakeEventEmitter.emit('exit', 0); // Passing tsc command
    }));
    it('should call `Cypress.open` if headless mode is `false`', (done) => __awaiter(this, void 0, void 0, function* () {
        const run = yield architect.scheduleBuilder('@nrwl/cypress:cypress', Object.assign({}, cypressBuilderOptions, { headless: false, watch: true }));
        run.result.then(() => __awaiter(this, void 0, void 0, function* () {
            yield run.stop();
            expect(cypressOpen).toHaveBeenCalledWith(jasmine.objectContaining({
                config: { baseUrl: 'http://localhost:4200' },
                project: path.dirname(cypressBuilderOptions.cypressConfig)
            }));
            expect(cypressRun).not.toHaveBeenCalled();
            done();
        }));
        fakeEventEmitter.emit('exit', 0); // Passing tsc command
    }));
    it('should call `Cypress.run` with provided baseUrl', (done) => __awaiter(this, void 0, void 0, function* () {
        const run = yield architect.scheduleBuilder('@nrwl/cypress:cypress', Object.assign({}, cypressBuilderOptions, { devServerTarget: undefined, baseUrl: 'http://my-distant-host.com' }));
        run.result.then(() => __awaiter(this, void 0, void 0, function* () {
            yield run.stop();
            expect(cypressRun).toHaveBeenCalledWith(jasmine.objectContaining({
                config: {
                    baseUrl: 'http://my-distant-host.com'
                },
                project: path.dirname(cypressBuilderOptions.cypressConfig)
            }));
            done();
            expect(cypressOpen).not.toHaveBeenCalled();
        }));
        fakeEventEmitter.emit('exit', 0); // Passing tsc command
    }));
    it('should call `Cypress.run` with provided browser', (done) => __awaiter(this, void 0, void 0, function* () {
        const run = yield architect.scheduleBuilder('@nrwl/cypress:cypress', Object.assign({}, cypressBuilderOptions, { browser: 'chrome' }));
        run.result.then(() => __awaiter(this, void 0, void 0, function* () {
            yield run.stop();
            expect(cypressRun).toHaveBeenCalledWith(jasmine.objectContaining({
                browser: 'chrome',
                project: path.dirname(cypressBuilderOptions.cypressConfig)
            }));
            expect(cypressOpen).not.toHaveBeenCalled();
            done();
        }));
        fakeEventEmitter.emit('exit', 0); // Passing tsc command
    }));
    it('should call `Cypress.run` without baseUrl nor dev server target value', (done) => __awaiter(this, void 0, void 0, function* () {
        const run = yield architect.scheduleBuilder('@nrwl/cypress:cypress', {
            cypressConfig: 'apps/my-app-e2e/cypress.json',
            tsConfig: 'apps/my-app-e2e/tsconfig.json',
            devServerTarget: undefined,
            headless: true,
            exit: true,
            parallel: false,
            record: false,
            baseUrl: undefined,
            watch: false
        });
        run.result.then(() => __awaiter(this, void 0, void 0, function* () {
            yield run.stop();
            expect(cypressRun).toHaveBeenCalledWith(jasmine.objectContaining({
                project: path.dirname(cypressBuilderOptions.cypressConfig)
            }));
            expect(cypressOpen).not.toHaveBeenCalled();
            done();
        }));
        fakeEventEmitter.emit('exit', 0); // Passing tsc command
    }));
    it('should fail early if application build fails', (done) => __awaiter(this, void 0, void 0, function* () {
        devkitArchitect.scheduleTargetAndForget = jest
            .fn()
            .mockReturnValue(rxjs_1.of({
            success: false
        }));
        const run = yield architect.scheduleBuilder('@nrwl/cypress:cypress', cypressBuilderOptions);
        run.result.then((res) => __awaiter(this, void 0, void 0, function* () {
            yield run.stop();
            expect(res.success).toBe(false);
            done();
        }));
    }));
    describe('legacy', () => {
        beforeEach(() => {
            cypressConfig = {
                fixturesFolder: '../../dist/out-tsc/apps/my-app-e2e/src/fixtures',
                integrationFolder: '../../dist/out-tsc/apps/my-app-e2e/src/integration'
            };
        });
        it('should call `fork.child_process` with the tsc command', () => __awaiter(this, void 0, void 0, function* () {
            const run = yield architect.scheduleBuilder('@nrwl/cypress:cypress', cypressBuilderOptions);
            fakeEventEmitter.emit('exit', 0);
            yield run.result;
            yield run.stop();
            expect(fork).toHaveBeenCalledWith('/root/node_modules/typescript/bin/tsc', ['-p', '/root/apps/my-app-e2e/tsconfig.json'], { stdio: [0, 1, 2, 'ipc'] });
        }));
        it('should copy fixtures folder to out-dir', (done) => __awaiter(this, void 0, void 0, function* () {
            const run = yield architect.scheduleBuilder('@nrwl/cypress:cypress', cypressBuilderOptions);
            run.result.then(() => __awaiter(this, void 0, void 0, function* () {
                yield run.stop();
                expect(fsExtras.copySync).toHaveBeenCalledWith('/root/apps/my-app-e2e/src/fixtures', '/root/dist/out-tsc/apps/my-app-e2e/src/fixtures', { overwrite: true });
                done();
            }));
            fakeEventEmitter.emit('exit', 0); // Passing tsc command
        }));
        it('should not copy fixtures folder if they are not defined in the cypress config', (done) => __awaiter(this, void 0, void 0, function* () {
            delete cypressConfig.fixturesFolder;
            const run = yield architect.scheduleBuilder('@nrwl/cypress:cypress', cypressBuilderOptions);
            run.result.then(() => __awaiter(this, void 0, void 0, function* () {
                yield run.stop();
                expect(fsExtras.copySync).not.toHaveBeenCalled();
                done();
            }));
            fakeEventEmitter.emit('exit', 0); // Passing tsc command
        }));
        it('should copy regex files to out-dir', (done) => __awaiter(this, void 0, void 0, function* () {
            const regex = '^.+\\.feature$';
            const run = yield architect.scheduleBuilder('@nrwl/cypress:cypress', Object.assign({}, cypressBuilderOptions, { copyFiles: regex }));
            run.result.then(() => __awaiter(this, void 0, void 0, function* () {
                yield run.stop();
                expect(fsExtras.copySync).toHaveBeenCalledWith('/root/apps/my-app-e2e/src/integration', '/root/dist/out-tsc/apps/my-app-e2e/src/integration', { filter: jasmine.any(Function) });
                done();
            }));
            fakeEventEmitter.emit('exit', 0); // Passing tsc command
        }));
        it('should not copy regex files if the regex is not defined', (done) => __awaiter(this, void 0, void 0, function* () {
            const regex = undefined;
            const run = yield architect.scheduleBuilder('@nrwl/cypress:cypress', Object.assign({}, cypressBuilderOptions, { copyFiles: regex }));
            run.result.then(() => __awaiter(this, void 0, void 0, function* () {
                yield run.stop();
                expect(fsExtras.copySync).not.toHaveBeenCalledWith('/root/apps/my-app-e2e/src/integration', '/root/dist/out-tsc/apps/my-app-e2e/src/integration', { filter: jasmine.any(Function) });
                done();
            }));
            fakeEventEmitter.emit('exit', 0); // Passing tsc command
        }));
        it('should not copy regex files if the integration files are not defined in the cypress config', (done) => __awaiter(this, void 0, void 0, function* () {
            delete cypressConfig.integrationFolder;
            const regex = '^.+\\.feature$';
            const run = yield architect.scheduleBuilder('@nrwl/cypress:cypress', Object.assign({}, cypressBuilderOptions, { copyFiles: regex }));
            run.result
                .then(() => __awaiter(this, void 0, void 0, function* () {
                yield run.stop();
                fail();
            }))
                .catch(() => __awaiter(this, void 0, void 0, function* () {
                yield run.stop();
                done();
            }));
            fakeEventEmitter.emit('exit', 0); // Passing tsc command
        }));
        it('should fail early if integration files fail to compile', (done) => __awaiter(this, void 0, void 0, function* () {
            const run = yield architect.scheduleBuilder('@nrwl/cypress:cypress', cypressBuilderOptions);
            run.result.then((res) => __awaiter(this, void 0, void 0, function* () {
                yield run.stop();
                expect(res.success).toBe(false);
                done();
            }));
            fakeEventEmitter.emit('exit', 1); // Passing tsc command
        }));
    });
});
