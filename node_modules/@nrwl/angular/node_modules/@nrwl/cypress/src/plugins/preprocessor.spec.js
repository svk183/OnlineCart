"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const preprocessor_1 = require("./preprocessor");
jest.mock('tsconfig-paths-webpack-plugin');
const tsconfig_paths_webpack_plugin_1 = require("tsconfig-paths-webpack-plugin");
describe('getWebpackConfig', () => {
    beforeEach(() => {
        tsconfig_paths_webpack_plugin_1.default.mockImplementation(function MockPathsPlugin() { });
    });
    it('should load typescript', () => {
        const config = preprocessor_1.getWebpackConfig({
            env: {
                tsConfig: './tsconfig.json'
            }
        });
        expect(config.module.rules).toContainEqual({
            test: /\.(j|t)sx?$/,
            loader: 'ts-loader',
            exclude: [/node_modules/],
            options: {
                configFile: './tsconfig.json',
                // https://github.com/TypeStrong/ts-loader/pull/685
                experimentalWatchApi: true,
                transpileOnly: true
            }
        });
    });
    it('should resolve tsconfig paths', () => {
        const config = preprocessor_1.getWebpackConfig({
            env: {
                tsConfig: './tsconfig.json'
            }
        });
        expect(config.resolve.plugins.some(plugin => plugin instanceof tsconfig_paths_webpack_plugin_1.default)).toEqual(true);
    });
    it('should resolve relevant extensions', () => {
        const config = preprocessor_1.getWebpackConfig({
            env: {
                tsConfig: './tsconfig.json'
            }
        });
        expect(config.resolve.extensions).toEqual([
            '.ts',
            '.tsx',
            '.mjs',
            '.js',
            '.jsx'
        ]);
    });
    it('should keep node_modules external', () => {
        const config = preprocessor_1.getWebpackConfig({
            env: {
                tsConfig: './tsconfig.json'
            }
        });
        const callback = jest.fn();
        config.externals[0](null, '@nestjs/core', callback);
        expect(callback).toHaveBeenCalledWith(null, 'commonjs @nestjs/core');
    });
});
