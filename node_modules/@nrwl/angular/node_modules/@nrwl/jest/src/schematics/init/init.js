"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const workspace_1 = require("@nrwl/workspace");
const versions_1 = require("../../utils/versions");
const literals_1 = require("@angular-devkit/core/src/utils/literals");
const rxjs_1 = require("rxjs");
const removeNrwlJestFromDeps = (host) => {
    // check whether to update the packge.json is necessary
    const currentPackageJson = workspace_1.readJsonInTree(host, 'package.json');
    if (currentPackageJson.dependencies &&
        currentPackageJson.dependencies['@nrwl/jest']) {
        return workspace_1.updateJsonInTree('package.json', json => {
            json.dependencies = json.dependencies || {};
            delete json.dependencies['@nrwl/jest'];
            return json;
        });
    }
    else {
        return rxjs_1.noop();
    }
};
const createJestConfig = (host) => {
    if (!host.exists('jest.config.js')) {
        host.create('jest.config.js', literals_1.stripIndents `
  module.exports = {
    testMatch: ['**/+(*.)+(spec|test).+(ts|js)?(x)'],
    transform: {
      '^.+\\.(ts|js|html)$': 'ts-jest'
    },
    resolver: '@nrwl/jest/plugins/resolver',
    moduleFileExtensions: ['ts', 'js', 'html'],
    coverageReporters: ['html'],
    passWithNoTests: true
  };`);
    }
};
function default_1() {
    return schematics_1.chain([
        createJestConfig,
        workspace_1.addDepsToPackageJson({}, {
            '@nrwl/jest': versions_1.nxVersion,
            jest: versions_1.jestVersion,
            '@types/jest': versions_1.jestTypesVersion,
            'ts-jest': versions_1.tsJestVersion
        }),
        removeNrwlJestFromDeps
    ]);
}
exports.default = default_1;
