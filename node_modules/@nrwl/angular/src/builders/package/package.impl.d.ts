import { BuilderContext, BuilderOutput } from '@angular-devkit/architect';
import { JsonObject } from '@angular-devkit/core';
import { ProjectGraphNode } from '@nrwl/workspace/src/core/project-graph';
import { Observable } from 'rxjs';
export interface BuildAngularLibraryBuilderOptions {
    /**
     * The file path for the ng-packagr configuration file, relative to the current workspace.
     */
    project: string;
    /**
     * The full path for the TypeScript configuration file, relative to the current workspace.
     */
    tsConfig?: string;
    /**
     * Run build when files change.
     */
    watch?: boolean;
}
declare type DependentLibraryNode = {
    scope: string;
    outputPath: string;
    node: ProjectGraphNode;
};
/**
 * Given a target library, uses the project dep graph to find all its dependencies
 * and calculates the `scope` name and output path
 * @param targetProj the target library to build
 */
export declare function calculateLibraryDependencies(context: BuilderContext): DependentLibraryNode[];
export declare function run(options: BuildAngularLibraryBuilderOptions & JsonObject, context: BuilderContext): Observable<BuilderOutput>;
declare const _default: import("@angular-devkit/architect/src/internal").Builder<any>;
export default _default;
