"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const workspace_1 = require("@nrwl/workspace");
const versions_1 = require("../../utils/versions");
const versions_2 = require("../../utils/versions");
function updateDependencies() {
    const deps = {
        '@angular/animations': versions_1.angularVersion,
        '@angular/common': versions_1.angularVersion,
        '@angular/compiler': versions_1.angularVersion,
        '@angular/core': versions_1.angularVersion,
        '@angular/forms': versions_1.angularVersion,
        '@angular/platform-browser': versions_1.angularVersion,
        '@angular/platform-browser-dynamic': versions_1.angularVersion,
        '@angular/router': versions_1.angularVersion,
        'core-js': '^2.5.4',
        rxjs: versions_1.rxjsVersion,
        'zone.js': '^0.9.1'
    };
    const devDeps = {
        '@angular/compiler-cli': versions_1.angularVersion,
        '@angular/language-service': versions_1.angularVersion,
        '@angular-devkit/build-angular': versions_1.angularDevkitVersion,
        codelyzer: '~5.0.1'
    };
    return workspace_1.addDepsToPackageJson(deps, devDeps);
}
function addUnitTestRunner(options) {
    switch (options.unitTestRunner) {
        case "karma" /* Karma */:
            return schematics_1.schematic('karma', {});
        case "jest" /* Jest */:
            return schematics_1.chain([
                workspace_1.addDepsToPackageJson({}, {
                    'jest-preset-angular': versions_2.jestPresetAngularVersion
                }),
                (host) => {
                    const packageJson = workspace_1.readJsonInTree(host, 'package.json');
                    if (packageJson.devDependencies['@nrwl/jest']) {
                        return schematics_1.noop();
                    }
                    return schematics_1.externalSchematic('@nrwl/jest', 'init', {}, {
                        interactive: false
                    });
                }
            ]);
        default:
            return schematics_1.noop();
    }
}
exports.addUnitTestRunner = addUnitTestRunner;
function addE2eTestRunner(options) {
    switch (options.e2eTestRunner) {
        case "protractor" /* Protractor */:
            return (host) => {
                const packageJson = workspace_1.readJsonInTree(host, 'package.json');
                if (packageJson.devDependencies['protractor']) {
                    return schematics_1.noop();
                }
                return workspace_1.addDepsToPackageJson({}, {
                    protractor: '~5.4.0',
                    'jasmine-core': '~2.99.1',
                    'jasmine-spec-reporter': '~4.2.1',
                    '@types/jasmine': '~2.8.6',
                    '@types/jasminewd2': '~2.0.3'
                });
            };
        case "cypress" /* Cypress */:
            return (host) => {
                const packageJson = workspace_1.readJsonInTree(host, 'package.json');
                if (packageJson.devDependencies['@nrwl/cypress']) {
                    return schematics_1.noop();
                }
                return schematics_1.externalSchematic('@nrwl/cypress', 'ng-add', {}, {
                    interactive: false
                });
            };
        default:
            return schematics_1.noop();
    }
}
exports.addE2eTestRunner = addE2eTestRunner;
function setDefaults(options) {
    return workspace_1.updateWorkspace(workspace => {
        workspace.extensions.schematics = workspace.extensions.schematics || {};
        workspace.extensions.schematics['@nrwl/angular:application'] =
            workspace.extensions.schematics['@nrwl/angular:application'] || {};
        workspace.extensions.schematics['@nrwl/angular:application'].unitTestRunner =
            workspace.extensions.schematics['@nrwl/angular:application']
                .unitTestRunner || options.unitTestRunner;
        workspace.extensions.schematics['@nrwl/angular:application'].e2eTestRunner =
            workspace.extensions.schematics['@nrwl/angular:application']
                .e2eTestRunner || options.e2eTestRunner;
        workspace.extensions.schematics['@nrwl/angular:library'] =
            workspace.extensions.schematics['@nrwl/angular:library'] || {};
        workspace.extensions.schematics['@nrwl/angular:library'].unitTestRunner =
            workspace.extensions.schematics['@nrwl/angular:library'].unitTestRunner ||
                options.unitTestRunner;
        workspace.extensions.cli = workspace.extensions.cli || {};
        const defaultCollection = workspace.extensions.cli &&
            workspace.extensions.cli.defaultCollection;
        if (!defaultCollection || defaultCollection === '@nrwl/workspace') {
            workspace.extensions.cli.defaultCollection =
                '@nrwl/angular';
        }
    });
}
exports.setDefaults = setDefaults;
function default_1(options) {
    return schematics_1.chain([
        setDefaults(options),
        updateDependencies(),
        addUnitTestRunner(options),
        addE2eTestRunner(options),
        workspace_1.formatFiles()
    ]);
}
exports.default = default_1;
