var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
jest.mock('./file-utils', () => ({
    getFilesToLint: jest.fn()
}));
jest.mock('eslint', () => ({
    CLIEngine: jest.fn()
}));
const { CLIEngine } = require('eslint');
CLIEngine.mockImplementation(() => ({
    executeOnFiles: (args) => args
}));
const { lint } = require('./eslint-utils');
function prog(sourceFile) {
    return {
        getSourceFile: (file) => (sourceFile === file ? true : undefined)
    };
}
describe('eslint-util', () => {
    beforeEach(() => {
        jest.clearAllMocks();
    });
    it('should get files for linting with the correct params', () => __awaiter(this, void 0, void 0, function* () {
        const { getFilesToLint } = require('./file-utils');
        const lintedFiles = new Set();
        yield lint('/root', './.eslintrc', { foo: 'bar' }, lintedFiles, 'ts-program').catch(() => { });
        expect(getFilesToLint).toHaveBeenCalledWith('/root', { foo: 'bar' }, 'ts-program');
    }));
    it('should create the CLI Engine with the proper parameters', () => __awaiter(this, void 0, void 0, function* () {
        const lintedFiles = new Set();
        yield lint('/root', './.eslintrc', { fix: true, cache: true, cacheLocation: '/root/cache' }, lintedFiles, 'ts-program').catch(() => { });
        expect(CLIEngine).toHaveBeenCalledWith({
            configFile: './.eslintrc',
            useEslintrc: false,
            fix: true,
            cache: true,
            cacheLocation: '/root/cache'
        });
    }));
    it('should not lint the same files twice', () => __awaiter(this, void 0, void 0, function* () {
        const { getFilesToLint } = require('./file-utils');
        getFilesToLint.mockReturnValue([
            'file1',
            'file2',
            'file1',
            'file3',
            'file4'
        ]);
        const lintedFiles = new Set();
        lintedFiles.add('file4');
        const reports = yield lint('/root', './.eslintrc', { foo: 'bar' }, lintedFiles);
        expect(reports).toEqual([['file1'], ['file2'], ['file3']]);
    }));
    it('should throw an error if the file is not part of any program', () => __awaiter(this, void 0, void 0, function* () {
        const { getFilesToLint } = require('./file-utils');
        getFilesToLint.mockReturnValue([
            'file1',
            'file2',
            'file1',
            'file3'
        ]);
        const program = prog('file8');
        const allPrograms = [prog('file1'), prog('file2')];
        const lintedFiles = new Set();
        const lintPromise = lint('/root', './.eslintrc', { tsConfig: 'my-ts-project' }, lintedFiles, program, allPrograms);
        yield expect(lintPromise).rejects.toThrow(`File \"file3\" is not part of a TypeScript project 'my-ts-project'.`);
    }));
    it('should not throw an error if a file is not part of the current program but part of another', () => __awaiter(this, void 0, void 0, function* () {
        const { getFilesToLint } = require('./file-utils');
        getFilesToLint.mockReturnValue([
            'file1',
            'file2',
            'file1',
            'file3'
        ]);
        const program = prog('file2');
        const allPrograms = [prog('file1'), prog('file2'), prog('file3')];
        const lintedFiles = new Set();
        const lintPromise = lint('/root', './.eslintrc', { tsConfig: 'my-ts-project' }, lintedFiles, program, allPrograms);
        yield expect(lintPromise).resolves.toEqual([['file2']]);
    }));
});
