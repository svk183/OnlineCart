"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const core_1 = require("@angular-devkit/core");
const workspace_1 = require("@nrwl/workspace");
const workspace_2 = require("@nrwl/workspace");
const workspace_3 = require("@nrwl/workspace");
const workspace_4 = require("@nrwl/workspace");
const init_1 = require("../init/init");
function updateNxJson(options) {
    return workspace_1.updateJsonInTree(`/nx.json`, json => {
        return Object.assign(Object.assign({}, json), { projects: Object.assign(Object.assign({}, json.projects), { [options.name]: { tags: options.parsedTags } }) });
    });
}
function getBuildConfig(project, options) {
    return {
        builder: '@nrwl/node:build',
        options: {
            outputPath: core_1.join(core_1.normalize('dist'), options.appProjectRoot),
            main: core_1.join(project.sourceRoot, 'main.ts'),
            tsConfig: core_1.join(options.appProjectRoot, 'tsconfig.app.json'),
            assets: [core_1.join(project.sourceRoot, 'assets')]
        },
        configurations: {
            production: {
                optimization: true,
                extractLicenses: true,
                inspect: false,
                fileReplacements: [
                    {
                        replace: core_1.join(project.sourceRoot, 'environments/environment.ts'),
                        with: core_1.join(project.sourceRoot, 'environments/environment.prod.ts')
                    }
                ]
            }
        }
    };
}
function getServeConfig(options) {
    return {
        builder: '@nrwl/node:execute',
        options: {
            buildTarget: `${options.name}:build`
        }
    };
}
function updateWorkspaceJson(options) {
    return workspace_1.updateWorkspaceInTree(workspaceJson => {
        const project = {
            root: options.appProjectRoot,
            sourceRoot: core_1.join(options.appProjectRoot, 'src'),
            projectType: 'application',
            prefix: options.name,
            schematics: {},
            architect: {}
        };
        project.architect.build = getBuildConfig(project, options);
        project.architect.serve = getServeConfig(options);
        project.architect.lint = workspace_1.generateProjectLint(core_1.normalize(project.root), core_1.join(core_1.normalize(project.root), 'tsconfig.app.json'), options.linter);
        workspaceJson.projects[options.name] = project;
        workspaceJson.defaultProject = workspaceJson.defaultProject || options.name;
        return workspaceJson;
    });
}
function addAppFiles(options) {
    return schematics_1.mergeWith(schematics_1.apply(schematics_1.url(`./files/app`), [
        schematics_1.template({
            tmpl: '',
            name: options.name,
            root: options.appProjectRoot,
            offset: workspace_4.offsetFromRoot(options.appProjectRoot)
        }),
        schematics_1.move(options.appProjectRoot)
    ]));
}
function addProxy(options) {
    return (host, context) => {
        const projectConfig = workspace_3.getProjectConfig(host, options.frontendProject);
        if (projectConfig.architect && projectConfig.architect.serve) {
            const pathToProxyFile = `${projectConfig.root}/proxy.conf.json`;
            host.create(pathToProxyFile, JSON.stringify({
                '/api': {
                    target: 'http://localhost:3333',
                    secure: false
                }
            }, null, 2));
            workspace_1.updateWorkspaceInTree(json => {
                projectConfig.architect.serve.options.proxyConfig = pathToProxyFile;
                json.projects[options.frontendProject] = projectConfig;
                return json;
            })(host, context);
        }
    };
}
function default_1(schema) {
    return (host, context) => {
        const options = normalizeOptions(schema);
        return schematics_1.chain([
            init_1.default({
                skipFormat: true
            }),
            workspace_1.addLintFiles(options.appProjectRoot, options.linter),
            addAppFiles(options),
            updateWorkspaceJson(options),
            updateNxJson(options),
            options.unitTestRunner === 'jest'
                ? schematics_1.externalSchematic('@nrwl/jest', 'jest-project', {
                    project: options.name,
                    setupFile: 'none',
                    skipSerializers: true
                })
                : schematics_1.noop(),
            options.frontendProject ? addProxy(options) : schematics_1.noop()
        ])(host, context);
    };
}
exports.default = default_1;
function normalizeOptions(options) {
    const appDirectory = options.directory
        ? `${workspace_2.toFileName(options.directory)}/${workspace_2.toFileName(options.name)}`
        : workspace_2.toFileName(options.name);
    const appProjectName = appDirectory.replace(new RegExp('/', 'g'), '-');
    const appProjectRoot = core_1.join(core_1.normalize('apps'), appDirectory);
    const parsedTags = options.tags
        ? options.tags.split(',').map(s => s.trim())
        : [];
    return Object.assign(Object.assign({}, options), { name: workspace_2.toFileName(appProjectName), frontendProject: options.frontendProject
            ? workspace_2.toFileName(options.frontendProject)
            : undefined, appProjectRoot,
        parsedTags });
}
