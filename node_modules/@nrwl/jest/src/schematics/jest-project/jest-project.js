"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const workspace_1 = require("@nrwl/workspace");
const workspace_2 = require("@nrwl/workspace");
const workspace_3 = require("@nrwl/workspace");
const core_1 = require("@angular-devkit/core");
const init_1 = require("../init/init");
function generateFiles(options) {
    return (host, context) => {
        const projectConfig = workspace_2.getProjectConfig(host, options.project);
        return schematics_1.mergeWith(schematics_1.apply(schematics_1.url('./files'), [
            schematics_1.template(Object.assign({ tmpl: '' }, options, { projectRoot: projectConfig.root, offsetFromRoot: workspace_3.offsetFromRoot(projectConfig.root) })),
            options.setupFile === 'none'
                ? schematics_1.filter(file => file !== '/src/test-setup.ts')
                : schematics_1.noop(),
            schematics_1.move(projectConfig.root)
        ]))(host, context);
    };
}
function updateTsConfig(options) {
    return (host) => {
        const projectConfig = workspace_2.getProjectConfig(host, options.project);
        if (!host.exists(core_1.join(projectConfig.root, 'tsconfig.json'))) {
            throw new Error(`Expected ${core_1.join(projectConfig.root, 'tsconfig.json')} to exist. Please create one.`);
        }
        return workspace_1.updateJsonInTree(core_1.join(projectConfig.root, 'tsconfig.json'), json => {
            return Object.assign({}, json, { compilerOptions: Object.assign({}, json.compilerOptions, { types: Array.from(new Set([...(json.compilerOptions.types || []), 'node', 'jest'])) }) });
        });
    };
}
function updateWorkspaceJson(options) {
    return workspace_1.updateWorkspaceInTree(json => {
        const projectConfig = json.projects[options.project];
        projectConfig.architect.test = {
            builder: '@nrwl/jest:jest',
            options: {
                jestConfig: core_1.join(core_1.normalize(projectConfig.root), 'jest.config.js'),
                tsConfig: core_1.join(core_1.normalize(projectConfig.root), 'tsconfig.spec.json')
            }
        };
        if (options.setupFile !== 'none') {
            projectConfig.architect.test.options.setupFile = core_1.join(core_1.normalize(projectConfig.root), 'src/test-setup.ts');
        }
        if (projectConfig.architect.lint) {
            projectConfig.architect.lint.options.tsConfig = [
                ...projectConfig.architect.lint.options.tsConfig,
                core_1.join(core_1.normalize(projectConfig.root), 'tsconfig.spec.json')
            ];
        }
        return json;
    });
}
function check(options) {
    return (host, context) => {
        const projectConfig = workspace_2.getProjectConfig(host, options.project);
        if (projectConfig.architect.test) {
            throw new Error(`${options.project} already has a test architect option.`);
        }
        return host;
    };
}
function normalizeOptions(options) {
    if (!options.skipSetupFile) {
        return options;
    }
    return Object.assign({}, options, { setupFile: 'none' });
}
function default_1(options) {
    options = normalizeOptions(options);
    return schematics_1.chain([
        init_1.default(),
        check(options),
        generateFiles(options),
        updateTsConfig(options),
        updateWorkspaceJson(options)
    ]);
}
exports.default = default_1;
