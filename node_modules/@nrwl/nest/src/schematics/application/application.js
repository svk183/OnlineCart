"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const core_1 = require("@angular-devkit/core");
const workspace_1 = require("@nrwl/workspace");
const init_1 = require("../init/init");
function addMainFile(options) {
    return (host) => {
        host.overwrite(core_1.join(options.appProjectRoot, 'src/main.ts'), `/**
 * This is not a production server yet!
 * This is only a minimal backend to get started.
 **/

import { NestFactory } from '@nestjs/core';

import { AppModule } from './app/app.module';

async function bootstrap() {
  const app = await NestFactory.create(AppModule);
  const globalPrefix = 'api';
  app.setGlobalPrefix(globalPrefix);
  const port = process.env.port || 3333;
  await app.listen(port, () => {
    console.log('Listening at http://localhost:' + port + '/' + globalPrefix);
  });
}

bootstrap();
    `);
    };
}
function addAppFiles(options) {
    return schematics_1.mergeWith(schematics_1.apply(schematics_1.url(`./files`), [
        schematics_1.template({
            tmpl: '',
            name: options.name,
            root: options.appProjectRoot
        }),
        schematics_1.move(core_1.join(options.appProjectRoot, 'src'))
    ]));
}
function default_1(schema) {
    return (host, context) => {
        const options = normalizeOptions(schema);
        return schematics_1.chain([
            init_1.default({
                skipFormat: true
            }),
            schematics_1.externalSchematic('@nrwl/node', 'application', schema),
            addMainFile(options),
            addAppFiles(options),
            workspace_1.updateJsonInTree(core_1.join(options.appProjectRoot, 'tsconfig.json'), json => {
                json.compilerOptions.emitDecoratorMetadata = true;
                return json;
            })
        ])(host, context);
    };
}
exports.default = default_1;
function normalizeOptions(options) {
    const appDirectory = options.directory
        ? `${workspace_1.toFileName(options.directory)}/${workspace_1.toFileName(options.name)}`
        : workspace_1.toFileName(options.name);
    const appProjectRoot = core_1.join(core_1.normalize('apps'), appDirectory);
    return Object.assign({}, options, { appProjectRoot });
}
