"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const testing_1 = require("@nrwl/workspace/testing");
const workspace_1 = require("@nrwl/workspace");
const testing_2 = require("../../utils/testing");
describe('init', () => {
    let tree;
    beforeEach(() => {
        tree = schematics_1.Tree.empty();
        tree = testing_1.createEmptyWorkspace(tree);
    });
    it('should add dependencies', () => __awaiter(this, void 0, void 0, function* () {
        const result = yield testing_2.runSchematic('init', {}, tree);
        const packageJson = workspace_1.readJsonInTree(result, 'package.json');
        expect(packageJson.dependencies['@nrwl/nest']).toBeUndefined();
        expect(packageJson.devDependencies['@nrwl/nest']).toBeDefined();
        expect(packageJson.dependencies['@nestjs/core']).toBeDefined();
    }));
    describe('defaultCollection', () => {
        it('should be set if none was set before', () => __awaiter(this, void 0, void 0, function* () {
            const result = yield testing_2.runSchematic('init', {}, tree);
            const workspaceJson = workspace_1.readJsonInTree(result, 'workspace.json');
            expect(workspaceJson.cli.defaultCollection).toEqual('@nrwl/nest');
        }));
        it('should be set if @nrwl/workspace was set before', () => __awaiter(this, void 0, void 0, function* () {
            tree = yield testing_2.callRule(workspace_1.updateJsonInTree('workspace.json', json => {
                json.cli = {
                    defaultCollection: '@nrwl/workspace'
                };
                return json;
            }), tree);
            const result = yield testing_2.runSchematic('init', {}, tree);
            const workspaceJson = workspace_1.readJsonInTree(result, 'workspace.json');
            expect(workspaceJson.cli.defaultCollection).toEqual('@nrwl/nest');
        }));
        it('should not be set if something else was set before', () => __awaiter(this, void 0, void 0, function* () {
            tree = yield testing_2.callRule(workspace_1.updateJsonInTree('workspace.json', json => {
                json.cli = {
                    defaultCollection: '@nrwl/angular'
                };
                return json;
            }), tree);
            const result = yield testing_2.runSchematic('init', {}, tree);
            const workspaceJson = workspace_1.readJsonInTree(result, 'workspace.json');
            expect(workspaceJson.cli.defaultCollection).toEqual('@nrwl/angular');
        }));
    });
});
