"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const node_config_1 = require("./node.config");
jest.mock('tsconfig-paths-webpack-plugin');
const tsconfig_paths_webpack_plugin_1 = require("tsconfig-paths-webpack-plugin");
describe('getNodePartial', () => {
    let input;
    beforeEach(() => {
        input = {
            main: 'main.ts',
            outputPath: 'dist',
            tsConfig: 'tsconfig.json',
            externalDependencies: 'all',
            fileReplacements: [],
            statsJson: false
        };
        tsconfig_paths_webpack_plugin_1.default.mockImplementation(function MockPathsPlugin() { });
    });
    describe('unconditionally', () => {
        it('should target commonjs', () => {
            const result = node_config_1.getNodeWebpackConfig(input);
            expect(result.output.libraryTarget).toEqual('commonjs');
        });
        it('should target node', () => {
            const result = node_config_1.getNodeWebpackConfig(input);
            expect(result.target).toEqual('node');
        });
        it('should not polyfill node apis', () => {
            const result = node_config_1.getNodeWebpackConfig(input);
            expect(result.node).toEqual(false);
        });
    });
    describe('the optimization option when true', () => {
        it('should not minify', () => {
            const result = node_config_1.getNodeWebpackConfig(Object.assign({}, input, { optimization: true }));
            expect(result.optimization.minimize).toEqual(false);
        });
        it('should not concatenate modules', () => {
            const result = node_config_1.getNodeWebpackConfig(Object.assign({}, input, { optimization: true }));
            expect(result.optimization.concatenateModules).toEqual(false);
        });
    });
    describe('the externalDependencies option', () => {
        it('should change all node_modules to commonjs imports', () => {
            const result = node_config_1.getNodeWebpackConfig(input);
            const callback = jest.fn();
            result.externals[0](null, '@nestjs/core', callback);
            expect(callback).toHaveBeenCalledWith(null, 'commonjs @nestjs/core');
        });
        it('should change given module names to commonjs imports but not others', () => {
            const result = node_config_1.getNodeWebpackConfig(Object.assign({}, input, { externalDependencies: ['module1'] }));
            const callback = jest.fn();
            result.externals[0](null, 'module1', callback);
            expect(callback).toHaveBeenCalledWith(null, 'commonjs module1');
            result.externals[0](null, '@nestjs/core', callback);
            expect(callback).toHaveBeenCalledWith();
        });
        it('should not change any modules to commonjs imports', () => {
            const result = node_config_1.getNodeWebpackConfig(Object.assign({}, input, { externalDependencies: 'none' }));
            expect(result.externals).not.toBeDefined();
        });
    });
});
