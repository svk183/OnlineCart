"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@angular-devkit/core");
const app_root_1 = require("../utils/app-root");
const detect_package_manager_1 = require("../utils/detect-package-manager");
const plugin_utils_1 = require("../utils/plugin-utils");
const plugins_1 = require("../utils/plugins");
const output_1 = require("./output");
exports.list = {
    command: 'list [plugin]',
    describe: 'Lists installed plugins, capabilities of installed plugins and other available plugins.',
    builder: (yargs) => yargs.positional('plugin', {
        default: null,
        description: 'The name of an installed plugin to query'
    }),
    handler: listHandler
};
/**
 * List available plugins or capabilities within a specific plugin
 *
 * @remarks
 *
 * Must be run within an Nx workspace
 *
 */
function listHandler(args) {
    return __awaiter(this, void 0, void 0, function* () {
        if (args.plugin) {
            listCapabilities(args.plugin);
        }
        else {
            listPlugins();
        }
    });
}
function getPackageManagerInstallCommand() {
    let packageManager = detect_package_manager_1.detectPackageManager();
    let packageManagerInstallCommand = 'npm install --save-dev';
    switch (packageManager) {
        case 'yarn':
            packageManagerInstallCommand = 'yarn add --dev';
            break;
        case 'pnpm':
            packageManagerInstallCommand = 'pnpm install --save-dev';
            break;
    }
    return packageManagerInstallCommand;
}
function hasElements(obj) {
    return obj && Object.values(obj).length > 0;
}
function listCapabilities(pluginName) {
    const plugin = plugin_utils_1.getPluginCapabilities(app_root_1.appRootPath, pluginName);
    if (!plugin) {
        const approvedPlugin = plugins_1.approvedPlugins.find(p => p.name === pluginName);
        if (approvedPlugin) {
            const installedPlugins = plugin_utils_1.readCapabilitiesFromNodeModules(app_root_1.appRootPath);
            let workspaceVersion = 'latest';
            if (installedPlugins.some(x => x.name === '@nrwl/workspace')) {
                workspaceVersion = plugin_utils_1.getPluginVersion(app_root_1.appRootPath, '@nrwl/workspace');
            }
            output_1.output.note({
                title: `${pluginName} is not currently installed`,
                bodyLines: [
                    `Use "${getPackageManagerInstallCommand()} ${pluginName}@${workspaceVersion}" to add new capabilities`,
                    '',
                    `Visit ${core_1.terminal.bold(approvedPlugin.link ? approvedPlugin.link : 'https://nx.dev/')} for more information`
                ]
            });
        }
        else {
            output_1.output.error({
                title: `Could not find plugin ${pluginName}`
            });
        }
        return;
    }
    const hasBuilders = hasElements(plugin.builders);
    const hasSchematics = hasElements(plugin.schematics);
    if (!hasBuilders && !hasSchematics) {
        output_1.output.warn({ title: `No capabilities found in ${pluginName}` });
        return;
    }
    const bodyLines = [];
    if (hasSchematics) {
        bodyLines.push(core_1.terminal.bold(core_1.terminal.green('SCHEMATICS')));
        bodyLines.push('');
        bodyLines.push(...Object.keys(plugin.schematics).map(name => `${core_1.terminal.bold(name)} : ${plugin.schematics[name].description}`));
        if (hasBuilders) {
            bodyLines.push('');
        }
    }
    if (hasBuilders) {
        bodyLines.push(core_1.terminal.bold(core_1.terminal.green('BUILDERS')));
        bodyLines.push('');
        bodyLines.push(...Object.keys(plugin.builders).map(name => `${core_1.terminal.bold(name)} : ${plugin.builders[name].description}`));
    }
    output_1.output.log({
        title: `Capabilities in ${plugin.name} :`,
        bodyLines
    });
}
function listPlugins() {
    const installedPlugins = plugin_utils_1.readCapabilitiesFromNodeModules(app_root_1.appRootPath);
    // The following packages are present in any workspace. Hide them to avoid confusion.
    const hide = [
        '@angular-devkit/architect',
        '@angular-devkit/build-ng-packagr',
        '@angular-devkit/build-webpack',
        '@angular-eslint/builder'
    ];
    const filtered = installedPlugins.filter(p => hide.indexOf(p.name) === -1);
    output_1.output.log({
        title: `Installed plugins :`,
        bodyLines: filtered.map(p => {
            const capabilities = [];
            if (hasElements(p.builders)) {
                capabilities.push('builders');
            }
            if (hasElements(p.schematics)) {
                capabilities.push('schematics');
            }
            return `${core_1.terminal.bold(p.name)} (${capabilities.join()})`;
        })
    });
    const pluginMap = new Set(installedPlugins.map(p => p.name));
    const alsoAvailable = plugins_1.approvedPlugins.filter(p => !pluginMap.has(p.name));
    if (alsoAvailable.length) {
        output_1.output.log({
            title: `Also available :`,
            bodyLines: alsoAvailable.map(p => {
                return `${core_1.terminal.bold(p.name)} (${p.capabilities})`;
            })
        });
    }
    output_1.output.note({
        title: `Use "nx list [plugin]" to find out more`
    });
}
