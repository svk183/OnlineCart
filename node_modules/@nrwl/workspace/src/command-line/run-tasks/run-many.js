"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const shared_1 = require("../shared");
const run_command_1 = require("./run-command");
const utils_1 = require("./utils");
const output_1 = require("../output");
const deps_calculator_1 = require("../deps-calculator");
function runMany(parsedArgs) {
    parsedArgs = preprocess(parsedArgs);
    const args = utils_1.splitArgs(parsedArgs, flags);
    const environment = utils_1.readEnvironment(args.nxArgs.target);
    const { nxJson, workspaceJson } = environment;
    const allProjects = shared_1.getProjectNodes(workspaceJson, nxJson);
    const projects = getProjectsToRun(args.nxArgs, allProjects);
    const dependencies = deps_calculator_1.readDependencies(nxJson.npmScope, allProjects);
    const metadata = shared_1.createProjectMetadata(allProjects, dependencies, [], args.nxArgs.withDeps);
    run_command_1.runCommand(projects, metadata.dependencyGraph, args, environment);
}
exports.runMany = runMany;
function preprocess(args) {
    if (!args.all) {
        args.all = false;
    }
    if (!args.projects) {
        args.projects = [];
    }
    else {
        args.projects = args.projects.split(',').map((p) => p.trim());
    }
    return args;
}
function getProjectsToRun(args, allProjects) {
    const { projects, target, all } = args;
    let found = [];
    if (!all) {
        const notFound = [];
        const noConfig = [];
        for (let project of projects) {
            const node = allProjects.find(p => p.name === project);
            if (!node) {
                notFound.push(project);
            }
            else if (!utils_1.projectHasTargetAndConfiguration(node, target)) {
                noConfig.push(project);
            }
            else {
                found.push(node);
            }
        }
        if (notFound.length) {
            output_1.output.error({
                title: 'the following projects were not found in nx.json',
                bodyLines: notFound.map(p => '- ' + p)
            });
        }
        if (noConfig.length) {
            output_1.output.warn({
                title: `the following do not have configuration for "${target}"`,
                bodyLines: noConfig.map(p => '- ' + p)
            });
            process.exit(1);
        }
    }
    else {
        found = allProjects;
    }
    return found;
}
exports.getProjectsToRun = getProjectsToRun;
const dummyOptions = {
    target: '',
    projects: [],
    all: false,
    configuration: '',
    onlyFailed: false,
    'only-failed': false,
    runner: '',
    help: false,
    version: false,
    quiet: false,
    verbose: false
};
const flags = Object.keys(dummyOptions);
