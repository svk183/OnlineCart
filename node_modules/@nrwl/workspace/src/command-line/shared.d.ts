import { YargsAffectedOptions } from './run-tasks/affected';
import { Deps } from './deps-calculator';
export declare const TEN_MEGABYTES: number;
export declare type ImplicitDependencyEntry = {
    [key: string]: '*' | string[];
};
export declare type NormalizedImplicitDependencyEntry = {
    [key: string]: string[];
};
export declare type ImplicitDependencies = {
    files: NormalizedImplicitDependencyEntry;
    projects: NormalizedImplicitDependencyEntry;
};
export interface NxJson {
    implicitDependencies?: ImplicitDependencyEntry;
    npmScope: string;
    projects: {
        [projectName: string]: NxJsonProjectConfig;
    };
    tasksRunnerOptions?: {
        [tasksRunnerName: string]: {
            runner: string;
            options?: unknown;
        };
    };
}
export interface NxJsonProjectConfig {
    implicitDependencies?: string[];
    tags?: string[];
}
export declare enum ProjectType {
    app = "app",
    e2e = "e2e",
    lib = "lib"
}
export declare type ProjectNode = {
    name: string;
    root: string;
    type: ProjectType;
    tags: string[];
    files: string[];
    architect: {
        [k: string]: any;
    };
    implicitDependencies: string[];
    fileMTimes: {
        [filePath: string]: number;
    };
};
export interface ProjectMap {
    [projectName: string]: ProjectNode;
}
export interface ProjectStates {
    [projectName: string]: {
        affected: boolean;
        touched: boolean;
    };
}
export interface DependencyGraph {
    projects: ProjectMap;
    dependencies: Deps;
    roots: string[];
}
export interface ProjectMetadata {
    dependencyGraph: DependencyGraph;
    projectStates: ProjectStates;
}
export declare function printArgsWarning(options: YargsAffectedOptions): void;
export declare function parseFiles(options: YargsAffectedOptions): {
    files: string[];
};
export declare function getImplicitDependencies(projects: ProjectNode[], workspaceJson: any, nxJson: NxJson): ImplicitDependencies;
export declare function assertWorkspaceValidity(workspaceJson: any, nxJson: any): void;
export declare function getProjectNodes(workspaceJson: any, nxJson: NxJson): ProjectNode[];
export declare function cliCommand(): "nx" | "ng";
export declare function readWorkspaceJson(): any;
export declare function workspaceFileName(): "angular.json" | "workspace.json";
export declare function readPackageJson(): any;
export declare function readNxJson(): NxJson;
export declare function getProjectMetadata(touchedFiles: string[], withDeps: boolean): ProjectMetadata;
export declare function createProjectMetadata(projectNodes: ProjectNode[], dependencies: Deps, touchedProjects: string[], withDeps: boolean): ProjectMetadata;
export declare function getProjectRoots(projectNames: string[]): string[];
export declare function allFilesInDir(dirName: string): {
    file: string;
    mtime: number;
}[];
export declare function lastModifiedAmongProjectFiles(projects: ProjectNode[]): number;
export declare function getProjectMTime(project: ProjectNode): number;
/**
 * Returns the time when file was last modified
 * Returns -Infinity for a non-existent file
 */
export declare function mtime(filePath: string): number;
export declare function normalizedProjectRoot(p: ProjectNode): string;
