"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const shared_1 = require("./shared");
function touchedProjects(implicitDependencies, projects, touchedFiles) {
    projects = normalizeProjects(projects);
    touchedFiles = normalizeFiles(touchedFiles);
    const itp = implicitlyTouchedProjects(implicitDependencies, touchedFiles);
    // Return if all projects were implicitly touched
    if (itp.length === projects.length) {
        return itp;
    }
    const dtp = directlyTouchedProjects(projects, touchedFiles);
    return projects
        .filter(project => itp.includes(project.name) || dtp.includes(project.name))
        .map(project => project.name);
}
exports.touchedProjects = touchedProjects;
function getTouchedProjects(touchedFiles) {
    const workspaceJson = shared_1.readWorkspaceJson();
    const nxJson = shared_1.readNxJson();
    const projects = shared_1.getProjectNodes(workspaceJson, nxJson);
    const implicitDeps = shared_1.getImplicitDependencies(projects, workspaceJson, nxJson);
    return touchedProjects(implicitDeps, projects, touchedFiles).filter(p => !!p);
}
exports.getTouchedProjects = getTouchedProjects;
function implicitlyTouchedProjects(implicitDependencies, touchedFiles) {
    return Array.from(Object.entries(implicitDependencies.files).reduce((projectSet, [file, projectNames]) => {
        if (touchedFiles.find(tf => tf === file)) {
            projectNames.forEach(projectName => {
                projectSet.add(projectName);
            });
        }
        return projectSet;
    }, new Set()));
}
function directlyTouchedProjects(projects, touchedFiles) {
    return projects
        .filter(project => {
        return touchedFiles.some(file => {
            return project.files.some(projectFile => projectFile === file);
        });
    })
        .map(project => project.name);
}
function normalizeProjects(projects) {
    return projects.map(p => {
        return Object.assign({}, p, { files: normalizeFiles(p.files) });
    });
}
function normalizeFiles(files) {
    return files.map(f => f.replace(/[\\\/]+/g, '/'));
}
