"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const workspace_integrity_checks_1 = require("./workspace-integrity-checks");
const shared_1 = require("./shared");
const chalk_1 = require("chalk");
describe('WorkspaceIntegrityChecks', () => {
    describe('workspace.json is in sync with the filesystem', () => {
        it('should not error when they are in sync', () => {
            const c = new workspace_integrity_checks_1.WorkspaceIntegrityChecks([
                {
                    name: 'project1',
                    type: shared_1.ProjectType.lib,
                    root: 'libs/project1',
                    tags: [],
                    implicitDependencies: [],
                    architect: {},
                    files: ['libs/project1/src/index.ts'],
                    fileMTimes: {
                        'libs/project1/src/index.ts': 1
                    }
                }
            ], ['libs/project1/src/index.ts']);
            expect(c.run().length).toEqual(0);
        });
        it('should error when there are projects without files', () => {
            const c = new workspace_integrity_checks_1.WorkspaceIntegrityChecks([
                {
                    name: 'project1',
                    type: shared_1.ProjectType.lib,
                    root: 'libs/project1',
                    tags: [],
                    implicitDependencies: [],
                    architect: {},
                    files: [],
                    fileMTimes: {}
                },
                {
                    name: 'project2',
                    type: shared_1.ProjectType.lib,
                    root: 'libs/project2',
                    tags: [],
                    implicitDependencies: [],
                    architect: {},
                    files: ['libs/project2/src/index.ts'],
                    fileMTimes: {
                        'libs/project2/src/index.ts': 1
                    }
                }
            ], ['libs/project2/src/index.ts']);
            const errors = c.run();
            expect(errors).toEqual([
                {
                    bodyLines: [
                        `${chalk_1.default.grey('-')} Cannot find project 'project1' in 'libs/project1'`
                    ],
                    title: 'The angular.json file is out of sync'
                }
            ]);
        });
        it('should error when there are files in apps or libs without projects', () => {
            const c = new workspace_integrity_checks_1.WorkspaceIntegrityChecks([
                {
                    name: 'project1',
                    type: shared_1.ProjectType.lib,
                    root: 'libs/project1',
                    fileMTimes: {
                        'libs/project1/src/index.ts': 1
                    },
                    tags: [],
                    implicitDependencies: [],
                    architect: {},
                    files: ['libs/project1/src/index.ts']
                }
            ], ['libs/project1/src/index.ts', 'libs/project2/src/index.ts']);
            const errors = c.run();
            expect(errors).toEqual([
                {
                    bodyLines: [`${chalk_1.default.grey('-')} libs/project2/src/index.ts`],
                    title: 'The following file(s) do not belong to any projects:'
                }
            ]);
        });
    });
});
