import { Dependency } from '../command-line/deps-calculator';
import { ProjectNode } from '../command-line/shared';
export declare type Deps = {
    [projectName: string]: Dependency[];
};
export declare type DepConstraint = {
    sourceTag: string;
    onlyDependOnLibsWithTags: string[];
};
export declare function hasNoneOfTheseTags(proj: ProjectNode, tags: string[]): boolean;
export declare function matchImportWithWildcard(allowableImport: string, extractedImport: string): boolean;
export declare function isRelative(s: string): boolean;
export declare function isRelativeImportIntoAnotherProject(imp: string, projectPath: string, projectNodes: ProjectNode[], sourceFilePath: string): boolean;
export declare function findProjectUsingFile(projectNodes: ProjectNode[], file: string): ProjectNode;
export declare function findSourceProject(projectNodes: ProjectNode[], sourceFilePath: string): ProjectNode;
export declare function findTargetProject(projectNodes: ProjectNode[], targetFile: string): ProjectNode;
export declare function isAbsoluteImportIntoAnotherProject(imp: string): boolean;
export declare function findProjectUsingImport(projectNodes: ProjectNode[], npmScope: string, imp: string): ProjectNode;
export declare function isCircular(deps: Deps, sourceProject: ProjectNode, targetProject: ProjectNode): boolean;
export declare function findConstraintsFor(depConstraints: DepConstraint[], sourceProject: ProjectNode): DepConstraint[];
export declare function onlyLoadChildren(deps: Deps, sourceProjectName: string, targetProjectName: string, visited: string[]): any;
export declare function getSourceFilePath(sourceFileName: string, projectPath: string): string;
